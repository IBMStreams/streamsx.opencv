/*
Copyright (C) 2012, 2016, International Business Machines Corporation
All Rights Reserved
*/

/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 

%>

#include <sys/time.h>

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR()
  : MY_BASE_OPERATOR(),
  _tuple_count(0),
  _byte_count(0)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

static double now( )
{
  struct timeval tv ;
  gettimeofday(&tv, NULL) ;
  
  return (double)tv.tv_sec + ((double)tv.tv_usec / 1e6) ;
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);
  
  if (_tuple_count == 0)
  {
    _stat_time = -now( ) ;
  }
  
  _tuple_count++ ;
  _byte_count += sizeof(IPort0Type) ; 

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%= qt($opername . "::process Punctuation") %>, DBG_ASP);

  _stat_time += now( ) ;

  SPLLOG(L_ERROR, "Stat: " << _tuple_count << " tuples (" << ((double)_tuple_count / _stat_time) << " tuple/s), "
         << _byte_count << " bytes (" << ((double)_byte_count / _stat_time) << "), "
         << (_stat_time) << " seconds", DBG_ASP) ;

  _tuple_count = 0 ;
  _byte_count = 0 ;
  _stat_time = -now( ) ;

  SPLLOG(L_TRACE, "Exiting " <%= qt($opername."::process Punctuation") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

