/*
Copyright (C) 2012, 2016, International Business Machines Corporation
All Rights Reserved
*/

/* Additional includes go here */
#include <opencv.h>

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 
my $inTupleName = $model->getInputPortAt(0)->getCppTupleName(); 

my $aperture = get_param($model, "aperture", 3);

SPL::CodeGen::error("Must have exactly one, two, or three input ports") unless $model->getNumberOfInputPorts() == 1 || $model->getNumberOfInputPorts() == 2 || $model->getNumberOfInputPorts() == 3;
%>

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR() :
  MY_BASE_OPERATOR()
  <%= opencv_tb_init($model, "threshold1") %>
  <%= opencv_tb_init($model, "threshold2") %>,
  _aperture(0)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

  _aperture = <%= $aperture %> ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

// Tuple processing for mutating ports
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);

  <%= opencv_tb_implement($model, "threshold1") %>
  <%= opencv_tb_implement($model, "threshold2") %>

  IplImage* img_in = NULL ;

  IPort0Type & <%= $inTupleName %> = static_cast<IPort0Type &>(tuple);
  <%= copy2img(undef, "$inTupleName", "img_in") %> ;

  IplImage* img_out = cvCreateImage(cvSize(<%= $inTupleName %>.get_ipl_width( ),
                                           <%= $inTupleName %>.get_ipl_height( )),
                                    IPL_DEPTH_8U,
                                    1) ;

  if (!img_in || !img_out)
  {
    THROW(SPLRuntimeOperator, "Unable to create images") ;
  }
  else
  {
    double t1 = (double)<%= opencv_tb_get($model, "threshold1") %> ;
    double t2 = t1 + (double)<%= opencv_tb_get($model, "threshold2") %> ;

    cvCanny(img_in, img_out, t1, t2, _aperture) ;

    cvReleaseImage(&img_in) ;

    OPort0Type otuple ;
    <%= SPL::CodeGen::getOutputTupleCppAssignments('otuple', $model->getOutputPortAt(0)) %>
    <%= copy2tuple(undef, "img_out", "otuple") %> ;
    cvReleaseImage(&img_out) ;

    submit(otuple, 0);
  }
  
  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%= qt($opername . "::process Punctuation") %>, DBG_ASP);

  submit(punct, 0);

  SPLLOG(L_TRACE, "Exiting " <%= qt($opername."::process Punctuation") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

