/*
 * # Licensed Materials - Property of IBM
 * # Copyright IBM Corp. 2012
 * # US Government Users Restricted Rights - Use, duplication or
 * # disclosure restricted by GSA ADP Schedule Contract with
 * # IBM Corp.
 */

/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 

my $cam_index = get_param($model, "index", 0) ;
my $frame_rate = get_param($model, "fps", undef) ;
my $frame_width = get_param($model, "width", undef) ;
my $frame_heigth = get_param($model, "height", undef) ;
%>

#include <sys/time.h>

#undef LOG_INFO // conflict with syslog
#include <opencv.h>

using namespace std;

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR() 
  : MY_BASE_OPERATOR(),
  _capture(NULL)
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

    if (_capture)
    {
      cvReleaseCapture(&_capture) ;
    }

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

    try
    {
      _capture = cvCreateCameraCapture(<%= $cam_index %>) ;
    }
    catch(cv::Exception& ex)
    {
      THROW(SPLRuntimeOperator, "cvCreateCameraCapture failed: " << ex) ;
    }

    if (_capture == NULL)
    {
      THROW(SPLRuntimeOperator, "Unable to open camera {" << <%= $cam_index %> << "}") ;
    }

    SPLLOG(L_INFO, "opened camera device #" << <%= $cam_index %>, DBG_ASP);

    <% if ($frame_rate)
       { %>

         cvSetCaptureProperty(_capture, CV_CAP_PROP_FPS, <%= $frame_rate %>) ;
         _inter_frame_delay = 1000 / <%= $frame_rate %> ;

    <% }
       else
       { %>

         double fps = cvGetCaptureProperty(_capture, CV_CAP_PROP_FPS) ;
         SPLLOG(L_INFO, "cvGetCaptureProperty(CV_CAP_PROP_FPS) returned " << fps, DBG_ASP);
         if (fps >= 1.0)
         {
           _inter_frame_delay = (uint32_t)(1000.0 / fps) ;
         }
         else
         {
           _inter_frame_delay = 1000 / 20 ;
         }
    <% } %>

    SPLLOG(L_INFO, "frame rate is " << cvGetCaptureProperty(_capture, CV_CAP_PROP_FPS) << ", inter-frame delay is " << _inter_frame_delay << "ms", DBG_ASP);

    <% if ($frame_width && $frame_heigth)
       { %>

         cvSetCaptureProperty(_capture, CV_CAP_PROP_FRAME_WIDTH, <%= $frame_width %>) ;
         cvSetCaptureProperty(_capture, CV_CAP_PROP_FRAME_HEIGHT, <%= $frame_heigth %>) ;

    <% } %>

    CvSize size = cvSize((int)cvGetCaptureProperty(_capture, CV_CAP_PROP_FRAME_WIDTH),
                         (int)cvGetCaptureProperty(_capture, CV_CAP_PROP_FRAME_HEIGHT)) ;

    SPLLOG(L_INFO, "frame size is " << size.width << "x" << size.height, DBG_ASP);

    createThreads(1); // Create source thread

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

static uint64_t now_ms( )
{
  struct timeval tv ;
  gettimeofday(&tv, NULL) ;
  uint64_t res = tv.tv_sec ;
  res = res * 1000LL ;
  res = res + (tv.tv_usec / 1000) ;
  return res ;
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);

    IplImage* frame ;
    uint64_t frame_count = 0 ;

    while (!getPE().getShutdownRequested())
    {
      uint64_t t1 = now_ms( ) ;

      SPLLOG(L_TRACE, "Preparing to read frame #" << frame_count, DBG_ASP);
 
      frame = cvQueryFrame(_capture) ;
      if (frame == NULL)
      {
        SPLLOG(L_INFO, "No more frame to capture", DBG_ASP);
        return ;
      }

      OPort0Type otuple;
      <%= SPL::CodeGen::getOutputTupleCppAssignments('otuple', $model->getOutputPortAt(0)) %>
      <%= copy2tuple(undef, "frame", "otuple") %> ;
    
      submit(otuple, 0); // submit to output port 0

      frame_count++ ;

      unsigned long long t2 = now_ms( ) ;

      if (t2 - t1 < _inter_frame_delay)
      {
        int d = (_inter_frame_delay - (t2 - t1)) ;
        SPLLOG(L_TRACE, "Sleeping " << d << "ms before the next frame", DBG_ASP) ;
        usleep(1000 * d) ;
      }
      else
      {
        SPLLOG(L_TRACE, "We're running too slow!! " << t2 - t1 << "ms elapsed since last frame", DBG_ASP) ;
      }
    }

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

