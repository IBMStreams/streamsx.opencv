/*
 * # Licensed Materials - Property of IBM
 * # Copyright IBM Corp. 2012
 * # US Government Users Restricted Rights - Use, duplication or
 * # disclosure restricted by GSA ADP Schedule Contract with
 * # IBM Corp.
 */

/* Additional includes go here */
#include <format.h>
#include <opencv.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <zlib.h>

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 
my $inTupleName = $model->getInputPortAt(0)->getCppTupleName(); 

my $hostname = get_param($model, "hostname", undef);
my $do_listen = get_param($model, "listen", 0);
my $port = get_param($model, "port", undef);
my $do_compress = get_param($model, "compress", 0);

SPL::CodeGen::error("Missing 'hostname' or 'listen' parameter") unless $do_listen || $hostname;

%>

using namespace std;
using namespace dpssupport::format;

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR() :
  _sock_fd(-1),
  _pf_comp_data(NULL),
  _pf_comp_data_size(0)
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

  memset(&_pf, 0, sizeof(_pf)) ;
  _pf.magic = htonl(0xDEADBEEF) ;

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

int MY_OPERATOR::establish_connection(int do_listen, const char* hostname, int port)
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::establishConnection") %>, DBG_ASP);

  if (do_listen)
  {
    int listen_sock_fd = socket(AF_INET, SOCK_STREAM, 0) ;

    if(listen_sock_fd < 0)
    {
      THROW(SPLRuntimeOperator, "Unable to create socket: " << ErrnoFormat(errno)) ;
    }

    struct sockaddr_in servaddr ;
    memset(&servaddr, 0, sizeof(servaddr)) ;
    servaddr.sin_family = AF_INET ;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY) ;
    servaddr.sin_port = htons(port) ;

    const int on = 1 ;
    setsockopt(listen_sock_fd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)) ;

    if (bind(listen_sock_fd, (struct sockaddr*)&servaddr, sizeof(servaddr)))
    {
      close(listen_sock_fd) ;
      THROW(SPLRuntimeOperator, "Unable to bind to port " << port << ": " << ErrnoFormat(errno)) ;
    }

    if (listen(listen_sock_fd, 16))
    {
      close(listen_sock_fd) ;
      THROW(SPLRuntimeOperator, "listen() failed: " << ErrnoFormat(errno)) ;
    }

    struct sockaddr_in myaddr_in ;
    socklen_t addrlen = sizeof(myaddr_in);
    if (getsockname(listen_sock_fd, (struct sockaddr *)&myaddr_in, &addrlen))
    {
      close(listen_sock_fd) ;
      THROW(SPLRuntimeOperator, "getsockname failed: " << ErrnoFormat(errno)) ;
    }

    port = ntohs(myaddr_in.sin_port) ;

    SPLLOG(L_INFO, "listening on port " << port, DBG_ASP) ;

    fd_set rfds;
    struct timeval tv;
    int retval;

    for(;;)
    {
      FD_ZERO(&rfds);
      FD_SET(listen_sock_fd, &rfds);

      tv.tv_sec = 0;
      tv.tv_usec = 100 * 1000 ;

      retval = select(listen_sock_fd + 1, &rfds, NULL, NULL, &tv);

      if (retval == -1)
      {
        close(listen_sock_fd) ;
        THROW(SPLRuntimeOperator, "select() failed: " << ErrnoFormat(errno)) ;
      }

      if (retval == 1)
      {
        break ;
      }
    }

    struct sockaddr_in cliaddr ;
    socklen_t clilen = sizeof(cliaddr) ;
    memset(&cliaddr, 0, sizeof(cliaddr)) ;

    int sock_fd = accept(listen_sock_fd, (struct sockaddr*) &cliaddr, &clilen) ;

    if (sock_fd < 0)
    {
      close(listen_sock_fd) ;
      THROW(SPLRuntimeOperator, "accept() failed: " << ErrnoFormat(errno)) ;
    }

    SPLLOG(L_INFO, "Connection with " << QT(inet_ntoa(cliaddr.sin_addr) << ":" << ntohs(cliaddr.sin_port)) << " opened", DBG_ASP) ;

    close(listen_sock_fd) ;

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::establishConnection") %>, DBG_ASP);

    return sock_fd ;
  }
  else
  {
    int sock_fd = socket(AF_INET, SOCK_STREAM, 0) ;

    if(sock_fd == -1)
    {
      THROW(SPLRuntimeOperator, "Unable to open socket: " << ErrnoFormat(errno)) ;
    }

    struct sockaddr_in servaddr ;
    memset(&servaddr, 0, sizeof(servaddr)) ;
    servaddr.sin_family = AF_INET ;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY) ;
    servaddr.sin_port = htons(port) ;

    if (inet_pton(AF_INET, hostname, &servaddr.sin_addr) <= 0)
    {
      struct hostent *h = gethostbyname(hostname) ;

      if (h == NULL)
      {
        close(sock_fd) ;
        THROW(SPLRuntimeOperator, "Invalid address: " << QT(hostname)) ;
      }

      SPLLOG(L_INFO, "resolving " << QT(hostname) << " to " << QT(h->h_name), DBG_ASP) ;

      char** ptr = h->h_addr_list ;
      if (ptr == NULL || *ptr == NULL)
      {
        close(sock_fd) ;
        THROW(SPLRuntimeOperator, "No result found for address: " << QT(hostname)) ;
      }

      memcpy(&servaddr.sin_addr, *ptr, h->h_length) ;
    }

    while(1)
    {
      if (connect(sock_fd, (struct sockaddr*) &servaddr, sizeof(servaddr)) == 0)
      {
        break ;
      }
      else
      {
        SPLLOG(L_ERROR, "Failed to connect to " << hostname << ": " << ErrnoFormat(errno) << "... Retrying in 1s", DBG_ASP) ;
      }
      sleep(1);
      if (getPE().getShutdownRequested())
      {
        return -1;
      }
    }

    SPLLOG(L_INFO, "Connection with '" << hostname << "' opened", DBG_ASP) ;

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::establishConnection") %>, DBG_ASP);

    return sock_fd ;
  }
}

static int write_bytes_v(int fd, struct iovec* iov, int count)
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::write_bytes_v") %>, DBG_ASP);

  uint32_t remaining_size = iov[0].iov_len + iov[1].iov_len ;

  while(remaining_size)
  {
    ssize_t s = writev(fd, iov, 2) ;

    if (s < 0)
    {
      SPLLOG(L_ERROR, "Unable to write to socket: " << ErrnoFormat(errno), DBG_ASP) ;
      return 0 ;
    }

    if (s == 0)
    {
      SPLLOG(L_ERROR, "Unable to write to socket: disconnected", DBG_ASP) ;
      return 0 ;
    }

    remaining_size -= s ;

    for (int i=0 ;i<2; i++)
    {
      if (iov[i].iov_len > 0)
      {
        if ((uint32_t)s > iov[i].iov_len)
        {
          s -= iov[i].iov_len ;
          iov[i].iov_len = 0 ;
        }
        else
        {
          iov[i].iov_len -= s ;
          s = 0 ;
        }
      }

      if (s == 0)
      {
        break ;
      }
    }

    if (s > 0)
    {
      SPLLOG(L_ERROR, "something bad happened... lost countof bytes", DBG_ASP) ;
      abort( ) ;
    }
  }

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::write_bytes_v") %>, DBG_ASP);

  return 1 ;
}


// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);

  if (getPE().getShutdownRequested( ))
  {
    SPLLOG(L_DEBUG, "Discarding frame since shutdown was requested", DBG_ASP) ;
    return ;
  }

  IplImage* frame = NULL ;
  const IPort0Type & <%= $inTupleName %> = static_cast<const IPort0Type &>(tuple);
  <%= copy2img(undef, "$inTupleName", "frame") %> ;

  if (!frame)
  {
    THROW(SPLRuntimeOperator, "Unable to create image") ;
  }

  AutoMutex lck(_mutex) ;

  if (_sock_fd == -1)
  {
    const char* hostname = NULL ;

    <% if ($hostname) {
        %>
      string hn(<%= qt($hostname) %>) ;
      hostname = hn.c_str( ) ;
      <% } %> ;

    _sock_fd = establish_connection(<%= $do_listen %>, hostname, <%= $port %>) ;
  }

  if (_sock_fd == -1)
  {
    cvReleaseImage(&frame) ;

    SPLLOG(L_INFO, "Unable to connect yet. Will try again next time", DBG_ASP) ;

    return ;
  }

  uint32_t data_size = frame->widthStep * frame->height ;

  _pf.real_size = htonl(data_size) ;
  _pf.width = htonl(frame->width) ;
  _pf.width_step = htonl(frame->widthStep) ;
  _pf.height = htonl(frame->height) ;
  _pf.depth = htonl(frame->depth) ;
  _pf.channels = htonl(frame->nChannels) ;

  _iov[0].iov_base = &_pf ;
  _iov[0].iov_len = sizeof(_pf);

  if (<%= $do_compress %>)
  {
    if (_pf_comp_data_size < data_size * 2)
    {
      if (_pf_comp_data)
      {
        free(_pf_comp_data) ;
      }

      _pf_comp_data_size = data_size * 2 ;
      _pf_comp_data = (uint8_t*)malloc(_pf_comp_data_size) ;
    }

    uLongf comp_data_size = _pf_comp_data_size ;
    int comp_error = compress(_pf_comp_data, &comp_data_size, (Bytef*)frame->imageData, data_size) ;

    if (comp_error != Z_OK)
    {
      THROW(SPLRuntimeOperator, "Compression failed: " << zError(comp_error) << "(" << comp_error << ")") ;
    }

    _pf.compressed_size = htonl(comp_data_size) ;

    _iov[1].iov_len = comp_data_size ;
    _iov[1].iov_base = _pf_comp_data ;
  }
  else
  {
    _pf.compressed_size = htonl(data_size) ;

    _iov[1].iov_len = data_size ;
    _iov[1].iov_base = frame->imageData ;
  }

  if (!write_bytes_v(_sock_fd, _iov, 2))
  {
    close(_sock_fd) ;
    _sock_fd = -1 ;

    SPLLOG(L_ERROR, "Unable to write to destination. Will try again next time", DBG_ASP) ;
  }

  cvReleaseImage(&frame) ;

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

