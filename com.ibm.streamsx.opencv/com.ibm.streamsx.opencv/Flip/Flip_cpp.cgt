/*
 * # Licensed Materials - Property of IBM
 * # Copyright IBM Corp. 2012
 * # US Government Users Restricted Rights - Use, duplication or
 * # disclosure restricted by GSA ADP Schedule Contract with
 * # IBM Corp.
 */

/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 
my $inTupleName = $model->getInputPortAt(0)->getCppTupleName(); 

my $horizontal = get_param($model, "horizontal", undef) ;
my $vertical = get_param($model, "vertical", undef) ;

SPL::CodeGen::error("At least one of parameters 'horizontal' or 'vertical' should be defined") unless $horizontal || $vertical ;

%>

#undef LOG_INFO // conflict with syslog
#include <opencv.h>

using namespace std;

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR()
  : MY_BASE_OPERATOR(),
  _horizontal(false),
  _vertical(false)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

  <% if ($horizontal) { %> _horizontal = <%= $horizontal %> ; <% } %> ;
  <% if ($vertical) { %> _vertical = <%= $vertical %> ; <% } %> ;
  
  SPLLOG(L_INFO, "horizontal=" << _horizontal << " vertical=" << _vertical, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);

  IplImage* img = NULL ;
  
  const IPort0Type & <%= $inTupleName %> = static_cast<const IPort0Type &>(tuple);
  <%= copy2img(undef, "$inTupleName", "img") %> ;
  
  if (!img)
  {
    THROW(SPLRuntimeOperator, "Unable to create image") ;
  }
  else
  {
    int flipmode = 0 ;
    
    /*
      flipMode -- Specifies how to flip the array: 0 means flipping
      around the x-axis, positive (e.g., 1) means flipping around
      y-axis, and negative (e.g., -1) means flipping around both axes.
     */

    if (_horizontal && !_vertical)
    {
      flipmode = 1 ;
      cvFlip(img, NULL, flipmode) ;
    }
    else
    {
      if (!_horizontal && _vertical)
      {
        flipmode = 0 ;
        cvFlip(img, NULL, flipmode) ;
      }
      else
      {
        if (_horizontal && _vertical)
        {
          flipmode = -1 ;
          cvFlip(img, NULL, flipmode) ;
        }
        else
        {
          // do not flip
        }
      }
    }

    OPort0Type otuple ;
    <%= SPL::CodeGen::getOutputTupleCppAssignments('otuple', $model->getOutputPortAt(0)) %>
    <%= copy2tuple(undef, "img", "otuple") %> ;
    cvReleaseImage(&img) ;
    
    submit(otuple, 0);
  }
  
  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%= qt($opername . "::process Punctuation") %>, DBG_ASP);

  submit(punct, 0) ;

  SPLLOG(L_TRACE, "Exiting " <%= qt($opername."::process Punctuation") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

