/*
 * # Licensed Materials - Property of IBM
 * # Copyright IBM Corp. 2012
 * # US Government Users Restricted Rights - Use, duplication or
 * # disclosure restricted by GSA ADP Schedule Contract with
 * # IBM Corp.
 */

/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 
my $inTupleName = $model->getInputPortAt(0)->getCppTupleName(); 

my @topleft = get_param($model, "topleft", undef) ;
SPL::CodeGen::error("parameter 'topleft' should be a pair") unless $#topleft == 1 ;

my @bottomright = get_param($model, "bottomright", undef) ;
SPL::CodeGen::error("parameter 'bottomright' should be a pair") unless $#bottomright == 1 ;

my @color = get_param($model, "color", undef) ;
SPL::CodeGen::error("parameter 'color' should be a a singleton or triplet") unless $#color == 0 || $#color == 2 ;

my $opacity = get_param($model, "opacity", 100) ;

%>

#undef LOG_INFO // conflict with syslog
#include <opencv.h>

using namespace std;

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

  _x1 = <%= $topleft[0] %> ;
  _y1 = <%= $topleft[1] %> ;
  _x2 = <%= $bottomright[0] %> ;
  _y2 = <%= $bottomright[1] %> ;

  <% if ($#color == 0)
  { %>
        _colors[0] = <%= $color[0] %> ;
        _colors[1] = <%= $color[0] %> ;
        _colors[2] = <%= $color[0] %> ;
    <% }
  else
  { %>
        _colors[0] = <%= $color[2] %> ;
        _colors[1] = <%= $color[1] %> ;
        _colors[2] = <%= $color[0] %> ;
    <% }
  %>
  
  _opacity = <%= $opacity %> ;

  SPLLOG(L_INFO, "Parameter: coord=" << _x1 << "x" << _y1 << "-" << _x2 << "x" << _y2
         << " color=[" << _colors[0] << "," << _colors[1] << "," << _colors[2] << "]"
         << " opacity=" << _opacity << "%", DBG_ASP) ;
  
  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);

  IplImage* img_in = NULL ;

  const IPort0Type & <%= $inTupleName %> = static_cast<const IPort0Type &>(tuple);
  <%= copy2img(undef, "$inTupleName", "img_in") %> ;

  if (!img_in)
  {
    THROW(SPLRuntimeOperator, "Unable to create images") ;
  }
  else
  {
    int max_y = (_y2 > img_in->height ? img_in->height : _y2) ;
    int max_x = (_x2 > img_in->width  ? img_in->width  : _x2) ;

    for(int y=_y1; y<max_y; y++)
    {
      uint8_t* ptr = (uint8_t*)img_in->imageData + (y * img_in->widthStep) ;
      
      for(int x=_x1; x<max_x; x++)
      {
        for(int c=0; c < img_in->nChannels; c++)
        {
          int32_t val = ptr[(img_in->nChannels * x) + c] ;
          int32_t col = _colors[c] ;
          
          ptr[(img_in->nChannels * x) + c] = (uint8_t)(val + (((col - val) * _opacity) / 100)) ;
        }
      }
    }

    OPort0Type otuple ;
    <%= SPL::CodeGen::getOutputTupleCppAssignments('otuple', $model->getOutputPortAt(0)) %>
    <%= copy2tuple(undef, "img_in", "otuple") %> ;
    cvReleaseImage(&img_in) ;
    
    submit(otuple, 0);
  }
  
  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%= qt($opername . "::process Punctuation") %>, DBG_ASP);

  submit(punct, 0) ;

  SPLLOG(L_TRACE, "Exiting " <%= qt($opername."::process Punctuation") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

