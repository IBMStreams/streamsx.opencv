/*
Copyright (C) 2012, 2016, International Business Machines Corporation
All Rights Reserved
*/

/* Additional includes go here */
#include <opencv.h>

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 
my $inTupleName = $model->getInputPortAt(0)->getCppTupleName(); 

%>

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR() :
  _elements(NULL),
  _size(1024),
  _origin(0),
  _next_tag(0),
  _pending(0)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

  _elements = new IPort0Type*[_size] ;

  for(uint32_t i=0; i<_size; i++)
  {
    _elements[i] = NULL ;
  }

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

  delete[] _elements ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);

  AutoMutex lck(_mutex) ;

  SPLLOG(L_DEBUG, "New tuple recieved. " << _pending << " tuples currently pending", DBG_ASP) ;

  const IPort0Type & <%= $inTupleName %> = static_cast<const IPort0Type &>(tuple);
  uint64_t tag = <%= $inTupleName %>.get_tag( ) ;

  if (tag < _next_tag)
  {
    SPLLOG(L_ERROR, "Tuple with tag " << tag << " is in the past. Expecting " << _next_tag << " or greater" , DBG_ASP) ;
    return ;
  }

  uint32_t offset = tag - _next_tag ;

  SPLLOG(L_DEBUG, "New tuple offset: " << offset, DBG_ASP) ;

  if (offset > _size - 1)
  {
    SPLLOG(L_ERROR, "Tuple with tag " << tag << " is too far in the future" , DBG_ASP) ;
    return ;
  }

  if (_elements[(_origin + offset) % _size] != NULL)
  {
    SPLLOG(L_ERROR, "Tuple with tag " << tag << " already in the queue" , DBG_ASP) ;
    return ;
  }

  if (tag == _next_tag)
  {
    SPLLOG(L_DEBUG, "New tuple matches next tag. Submitting", DBG_ASP) ;

    submit(tuple, 0) ;

    _origin = (_origin + 1) % _size ;
    _next_tag++ ;

    while (_elements[_origin] != NULL)
    {
      SPLLOG(L_DEBUG, "Next tuple @" << offset << " matches next tag. Submitting", DBG_ASP) ;

      submit(*(_elements[_origin]), 0) ;
      delete _elements[_origin] ;

      _elements[_origin] = NULL ;

      _origin = (_origin + 1) % _size ;
      _next_tag++ ;
      _pending++ ;
    }
  }
  else
  {
    SPLLOG(L_DEBUG, "New tuple is greater then next tag. Queueing", DBG_ASP) ;

    _elements[(_origin + offset) % _size] = new IPort0Type(tuple) ;
    _pending++ ;
  }

  SPLLOG(L_DEBUG, "Exiting process. " << _pending << " tuples still pending", DBG_ASP) ;
  
  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%= qt($opername . "::process Punctuation") %>, DBG_ASP);

  submit(punct, 0) ;

  SPLLOG(L_TRACE, "Exiting " <%= qt($opername."::process Punctuation") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

