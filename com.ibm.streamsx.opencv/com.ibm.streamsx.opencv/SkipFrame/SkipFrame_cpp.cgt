/*
Copyright (C) 2012, 2016, International Business Machines Corporation
All Rights Reserved
*/

/* Additional includes go here */
#include <opencv.h>

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 

my $style = get_param($model, "style", undef);
my $skip_frame = get_param($model, "frame", 0);

SPL::CodeGen::error("'style' must be 'adaptive' or 'fixed'\n") unless $style == "adaptive" || $style == "fixed" ;

%>

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR() :
  _skip_frame(0),
  _image_count(0),
  _image_skipped(0),
  _otuple(NULL)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

  _skip_frame = <%= $skip_frame %> ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

  <% if ($style == "adaptive") {
      %>

    AutoMutex lck(_mutex) ;

    if (_otuple)
    {
      delete _otuple ;
      _otuple = NULL ;
    }

    <% }
  %> ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);


  <% if ($style == "adaptive") {
      %>

  createThreads(1);

    <% }
  %> ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

  <% if ($style == "adaptive") {
      %>

    _new_image.broadcast( ) ;

    <% }
  %> ;

  if (_image_count)
    SPLLOG(L_INFO, _image_count << " images received, " << _image_skipped << " images skipped (" << ((100LL * _image_skipped) / _image_count) << "%)", DBG_ASP) ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
  sendLoop( ) ;
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);

  _image_count++ ;

  if (_skip_frame > 0 && (_image_count % _skip_frame))
  {
    SPLLOG(L_DEBUG, "Skipping frame " << _image_count, DBG_ASP) ;

    _image_skipped++ ;

    return ;
  }

  <% if ($style == "adaptive") {
      %>

      AutoMutex lck(_mutex) ;

      if (_otuple)
      {
        SPLLOG(L_DEBUG, "Dropping frame " << _image_count << " (" << _image_skipped << " skipped)", DBG_ASP) ;

        _image_skipped++ ;

        return ;
      }

      _otuple = new OPort0Type(tuple) ;

      _new_image.broadcast( ) ;

      SPLLOG(L_DEBUG, "New frame: " << _image_count, DBG_ASP) ;

      <% }
  else
  { %>

    SPLLOG(L_DEBUG, "New frame: " << _image_count, DBG_ASP) ;

    submit(tuple, 0);

    <% }
  %> ;
  
  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

void MY_OPERATOR::sendLoop( )
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::sendLoop") %>, DBG_ASP) ;

  <% if ($style == "adaptive") {
      %>

    AutoMutex lck(_mutex) ;

    while (!getPE().getShutdownRequested( ))
    {
      if (_otuple)
      {
        _mutex.unlock( ) ;

        submit(*_otuple, 0) ;

        _mutex.lock( ) ;

        delete _otuple ;
        _otuple = NULL ;
      }

      _new_image.wait(_mutex) ;
    }

    <% }
  %> ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::sendLoop") %>, DBG_ASP) ;
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
  SPLLOG(L_TRACE, "Entering " <%= qt($opername . "::process Punctuation") %>, DBG_ASP);

  submit(punct, 0) ;

  SPLLOG(L_TRACE, "Exiting " <%= qt($opername."::process Punctuation") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

