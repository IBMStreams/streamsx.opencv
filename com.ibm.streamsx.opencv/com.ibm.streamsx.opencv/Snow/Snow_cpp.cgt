/*
Copyright (C) 2012, 2016, International Business Machines Corporation
All Rights Reserved
*/

/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind();

my $frame_rate = get_param($model, "fps", 20) ;
my $frame_width = get_param($model, "width", 640) ;
my $frame_heigth = get_param($model, "height", 480) ;

%>
#include <sys/time.h>

#undef LOG_INFO // conflict with syslog
#include <opencv.h>

using namespace std;

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

  _inter_frame_delay = 1000 / <%= $frame_rate %> ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

  createThreads(1); // Create source thread

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

static uint64_t now_ms( )
{
  struct timeval tv ;
  gettimeofday(&tv, NULL) ;
  uint64_t res = tv.tv_sec ;
  res = res * 1000LL ;
  res = res + (tv.tv_usec / 1000) ;
  return res ;
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);

  uint64_t frame_count = 0 ;

  IplImage* cvimg = cvCreateImage(cvSize(<%= $frame_width %>, <%= $frame_heigth %>),
                                  IPL_DEPTH_8U, 1) ;
  
  OPort0Type otuple ;
  <%= SPL::CodeGen::getOutputTupleCppAssignments('otuple', $model->getOutputPortAt(0)) %>
  <%= copy2tuple(undef, "cvimg", "otuple") %> ;

  list<uint8>& pixels = otuple.get_ipl_data( ) ;
  uint8* ptr = &(pixels[0]) ;
  uint32_t size = pixels.size( ) ;
  
  while (!getPE().getShutdownRequested( ))
  {
    uint64_t t1 = now_ms( ) ;

    SPLLOG(L_TRACE, "Preparing to create frame #" << frame_count, DBG_ASP);

    for(uint32_t i=0; i<size; i++)
    {
      ptr[i] = (rand( ) < RAND_MAX / 2) ? 0 : 255 ;
    }

    submit(otuple, 0);

    frame_count++ ;

    unsigned long long t2 = now_ms( ) ;

    if (t2 - t1 < _inter_frame_delay)
    {
      int d = (_inter_frame_delay - (t2 - t1)) ;
      SPLLOG(L_TRACE, "Sleeping " << d << "ms before the next frame", DBG_ASP) ;
      usleep(1000 * d) ;
    }
    else
    {
      SPLLOG(L_TRACE, "We're running too slow!! " << t2 - t1 << "ms elapsed since last frame", DBG_ASP) ;
    }
  }

  cvReleaseImage(&cvimg) ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

