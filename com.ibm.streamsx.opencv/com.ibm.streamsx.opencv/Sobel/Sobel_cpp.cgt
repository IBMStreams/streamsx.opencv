/*
Copyright (C) 2012, 2016, International Business Machines Corporation
All Rights Reserved
*/

/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 
my $inTupleName = $model->getInputPortAt(0)->getCppTupleName(); 

%>

#undef LOG_INFO // conflict with syslog
#include <opencv.h>


using namespace std;

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
    // A typical implementation will loop until shutdown
    /*
      while(!getPE().getShutdownRequested()) {
          // do work ...
      }
    */
}

// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
    // Sample submit code
    /* 
      submit(otuple, 0); // submit to output port 0
    */
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);

    IplImage* img_in = NULL ;

    const IPort0Type & <%= $inTupleName %> = static_cast<const IPort0Type &>(tuple);
    <%= copy2img(undef, "$inTupleName", "img_in") %> ;

    IplImage* img_out16 = cvCreateImage(cvSize(<%= $inTupleName %>.get_ipl_width( ),
                                             <%= $inTupleName %>.get_ipl_height( )),
                                      IPL_DEPTH_16S,
                                      <%= $inTupleName %>.get_ipl_channels()) ;
  
  	IplImage* img_out8 = cvCreateImage(cvSize(<%= $inTupleName %>.get_ipl_width( ),
                                             <%= $inTupleName %>.get_ipl_height( )),
                                      IPL_DEPTH_8U,
                                      <%= $inTupleName %>.get_ipl_channels()) ;
  
    if (!img_in || !img_out16)
    {
      THROW(SPLRuntimeOperator, "Unable to create images") ;
    }
    else
    {
    	cvSobel(img_in, img_out16, 1, 0, 3);
    	cvConvertScaleAbs(img_out16, img_out8);
    	cvReleaseImage(&img_out16) ;
      cvReleaseImage(&img_in) ;
    
      OPort0Type otuple ;
      <%= SPL::CodeGen::getOutputTupleCppAssignments('otuple', $model->getOutputPortAt(0)) %>
      <%= copy2tuple(undef, "img_out8", "otuple") %> ;
      cvReleaseImage(&img_out8) ;
    
      submit(otuple, 0); // submit to output port 0

    }
  
    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
    SPLLOG(L_TRACE, "Entering " <%= qt($opername . "::process Punctuation") %>, DBG_ASP);

    submit(punct, 0); // submit to output port 0

    SPLLOG(L_TRACE, "Exiting " <%= qt($opername."::process Punctuation") %>, DBG_ASP);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

