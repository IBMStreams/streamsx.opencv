/*
Copyright (C) 2012, 2016, International Business Machines Corporation
All Rights Reserved
*/

/* Additional includes go here */

<%SPL::CodeGen::implementationPrologue($model);%>

<%
# Set up commonly used variables, includes, and requires
my $modelroot = $model->getContext()->getOperatorDirectory();
unshift @INC, dirname($modelroot) . "/Common";

use strict;
require opencv;
require util;
import opencv;
import util;

my $opername = $model->getContext()->getKind(); 

###my $display = get_param($model, "display", undef) ;
my $display = $model->getParameterByName("display")->getValueAt(0)->getCppExpression();

my $window_name = get_param($model, "title", undef) ;
my $trackbar_name = get_param($model, "name", undef) ;
my $trackbar_value = get_param($model, "value", undef) ;
my $trackbar_max = get_param($model, "max", undef) ;

my $oport = $model->getOutputPortAt(0) ;
SPL::CodeGen::error("Incorrect number of attributes in output port. Expecting 1") unless $oport->getNumberOfAttributes( ) == 1 ;
my $atname = $oport->getAttributeAt(0)->getName( ) ;

%>

#undef LOG_INFO // conflict with syslog
#include <opencv.h>
#include <opencv/highgui.h>
#include <mutex.h>

using namespace std;
using namespace dpssupport::opencv;
using namespace dpssupport::mutex;

#define DBG_ASP "opencv"

// Constructor
MY_OPERATOR::MY_OPERATOR()
  : MY_BASE_OPERATOR(),
  _last_value(0),
  _current_value(0),
  _shutdown(false)
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::".$opername) %>, DBG_ASP);

  _current_value = <%= $trackbar_value %> ;

  string display(<%=$display%>) ;
  setenv("DISPLAY", display.c_str( ), 1) ;

  <% if ($window_name) { %>
    _window_name = <%= qt($window_name) %> ;
  <% }
     else
     { %>
    stringstream s ;
    s << "TrackBar -- " << <%= qt($opername) %><< " -- " << (void*)this ;
    _window_name = s.str( ) ;
  <% } %>

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::".$opername) %>, DBG_ASP);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::~".$opername) %>, DBG_ASP);

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::~".$opername) %>, DBG_ASP);
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::allPortsReady") %>, DBG_ASP);

  create_window(_window_name) ;
      
  createThreads(2); // Create source threads

  string name(<%= qt($trackbar_name) %>) ;

  AutoLock<dpssupport::mutex::Mutex> lck(get_toolkit_mutex( )) ; 

  cvCreateTrackbar(name.c_str( ), _window_name.c_str( ), (int*)&_current_value, <%= $trackbar_max %>, NULL) ;

  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::allPortsReady") %>, DBG_ASP);
}
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
  SPLLOG(L_TRACE, "Entering " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);

  delete_window(_window_name) ;

  _shutdown = true ;
  
  SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::prepareToShutdown") %>, DBG_ASP);
}

// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
  if(idx == 0) // Thread to handle TrackBar value updates
  {
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::process") %>, DBG_ASP);
  
    while (!getPE().getShutdownRequested( ))
    {
      usleep(100 * 1000) ;
    
      if (_last_value != _current_value)
      {
        OPort0Type otuple ;
      
        _last_value = _current_value ;
        otuple.set_<%= $atname %>(_last_value) ;
      
        SPLLOG(L_DEBUG, "New TrackBar value: " << otuple, DBG_ASP) ;
        submit(otuple, 0);
      }
    }
  
    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::process") %>, DBG_ASP);
  }

  else if(idx == 1) // Thread to handle OpenCV Events
  {
    SPLLOG(L_TRACE, "Entering " <%=qt($opername."::processOpenCVEvents") %>, DBG_ASP);
    run_event_loop(&_shutdown);
    SPLLOG(L_TRACE, "Exiting " <%=qt($opername."::processOpenCVEvents") %>, DBG_ASP);
  }
}

<%SPL::CodeGen::implementationEpilogue($model);%>

