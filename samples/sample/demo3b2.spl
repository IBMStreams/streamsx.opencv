/*
Copyright (C) 2012, 2016, International Business Machines Corporation
All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.opencv::*;

composite demo3b2 {
  graph
    stream<IplImage> vid0 = CaptureFromFile() {
      param
        file : dataDirectory() + "/sample_contour3.mpg";
        repeat : 1;
      config
        placement : partitionColocation("P1");
    }

    stream<IplImage> bw_vid0 = CvtColor(vid0) {
      param
        cvt_param : "CV_BGR2GRAY"; /* Constants for color conversion (cv.h) (quoted) */
      config
        placement : partitionColocation("P1");
    }

//###########################################

    stream<int32 trackbar_threshold> tb_low = TrackBar() {
      param
        display : getEnvironmentVariable("DISPLAY");
        name : "low";
        title : "TrackBar";
        value : 80;
        max : 255;
      config
        placement : partitionColocation("P1");
    }

    stream<int32 trackbar_threshold> tb_high = TrackBar() {
      param
        display : getEnvironmentVariable("DISPLAY");
        name : "high";
        title : "TrackBar";
        value : 100;
        max : 255;
      config
        placement : partitionColocation("P1");
    }

    stream<IplImage> th_low_vid0 = Threshold(bw_vid0; tb_low) {
      param
        max : 255;
        threshold_type : "CV_THRESH_TOZERO"; /* Types of thresholding (cv.h) (quoted) */
      config
        placement : partitionColocation("P1");
    }

    stream<IplImage> th_high_vid0 = Threshold(bw_vid0; tb_high) {
      param
        max : 255;
        threshold_type : "CV_THRESH_BINARY"; /* Types of thresholding (cv.h) (quoted) */
      config
        placement : partitionColocation("P1");
    }

    stream<IplImage> final = Apply2(th_low_vid0; th_high_vid0) {
      param
        transform : "cvOr"; /* The CV "in place" function to apply, suitable functions are "cvOr", "cvAnd", "cvAbsDiff", etc. */
      config
        placement : partitionColocation("P1");
    }

    stream<IplImage> cntr = DrawContours(final) {
      config
        placement : partitionColocation("P1");
    }

    () as SinkOp1 = MJPEGStreamer(final) {
      param
        httpport : 9001;
      config
        placement : partitionColocation("P1");
    }

    () as SinkOp2 = MJPEGStreamer(cntr) {
      param
        httpport : 9002;
      config
        placement : partitionColocation("P1");
    }

//###########################################

    stream<IplImage> smooth_vid0 = Smooth(bw_vid0) {
      param
        iteration : 4;
      config
        placement : partitionColocation("P1");
    }

    stream<IplImage> th_low_s_vid0 = Threshold(smooth_vid0; tb_low) {
      param
        max : 255;
        threshold_type : "CV_THRESH_TOZERO"; /* Types of thresholding (cv.h) (quoted) */
      config
        placement : partitionColocation("P1");
    }

    stream<IplImage> th_high_s_vid0 = Threshold(smooth_vid0; tb_high) {
      param
        max : 255;
        threshold_type : "CV_THRESH_BINARY"; /* Types of thresholding (cv.h) (quoted) */
      config
        placement : partitionColocation("P1");
    }

    stream<IplImage> final_s = Apply2(th_low_s_vid0; th_high_s_vid0) {
      param
        transform : "cvOr"; /* The CV "in place" function to apply, suitable functions are "cvOr", "cvAnd", "cvAbsDiff", etc. */
      config
        placement : partitionColocation("P1");
    }

    stream<IplImage> cntr_s = DrawContours(final_s) {
      config
        placement : partitionColocation("P1");
    }

    () as SinkOp3 = MJPEGStreamer(cntr_s) {
      param
        httpport : 9003;
      config
        placement : partitionColocation("P1");
    }

//###########################################
}
